/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-xmlsec.h
 #	source generated by 4D Plugin Wizard
 #	Project : xmlsec
 #	author : miyako
 #	2021/05/18
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_XMLSEC_H
#define PLUGIN_XMLSEC_H

#include "4DPluginAPI.h"

#if VERSIONMAC
#import <Cocoa/Cocoa.h>
#endif

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "4DPlugin-JSON.h"

#define XMLSEC_CRYPTO_OPENSSL 1

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include <libxml/tree.h>
#include <libxml/xmlmemory.h>
#include <libxml/parser.h>
#include <libxml/xpath.h>
#include <libxml/xpathInternals.h>
#include <xmlsec/xmlsec.h>
#include <xmlsec/xmltree.h>
#include <xmlsec/xmldsig.h>
#include <xmlsec/crypto.h>
#include <xmlsec/templates.h>
#include <xmlsec/membuf.h>
#include <xmlsec/errors.h>

#include <libxslt/xslt.h>
#include <libxslt/security.h>

#include "C_TEXT.h"
#include "C_BLOB.h"

typedef std::basic_string<xmlChar> xmlString;

#pragma mark -

typedef enum {
 
    xmlsec_command_sign    = 0,
    xmlsec_command_verify  = 1,
    xmlsec_command_encrypt = 2,
    xmlsec_command_decrypt = 3
    
}xmlsec_command_t;

static void xmlsec_sign(PA_PluginParameters params);
static void xmlsec_verify(PA_PluginParameters params);
static void xmlsec_encrypt(PA_PluginParameters params);
static void xmlsec_decrypt(PA_PluginParameters params);

#endif /* PLUGIN_XMLSEC_H */
